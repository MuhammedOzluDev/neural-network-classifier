# -*- coding: utf-8 -*-
"""NeuralNetworkClassification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NQhrtJwH0L2viFB8azYZyku4LwcGvEfA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder

dataset=pd.read_csv("heart.csv")

x = dataset.drop('HeartDisease', axis=1)
y = dataset['HeartDisease']

dataset.head()

from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.preprocessing import StandardScaler

numeric_features = ['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']
categorical_features = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']

column_trans = make_column_transformer(
    (StandardScaler(), numeric_features),
    (OneHotEncoder(), categorical_features))

x=column_trans.fit_transform(x)
print(x.shape)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=0)

from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Modeli güncelleme
model = Sequential()
model.add(Dense(128, activation='relu', input_dim=19))
model.add(Dropout(0.4))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Optimizasyon algoritması ve öğrenme oranı
opt = Adam(learning_rate=0.0001)
model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])

# Early stopping ve model checkpoint
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
model_checkpoint = ModelCheckpoint('best_model.h5', monitor='val_accuracy', save_best_only=True)

# Modeli eğitme
history = model.fit(
    x_train, y_train,
    epochs=300,
    batch_size=64,
    validation_data=(x_test, y_test),
    callbacks=[early_stopping, model_checkpoint])

#history=model.fit(x_train,y_train,epochs=200,batch_size=32)

plt.plot(history.history["loss"])
plt.plot(history.history["accuracy"])
plt.ylim(0,1)
plt.show()

loss,accuracy=model.evaluate(x_test,y_test)
print(loss,accuracy)

y_head=model.predict(x_test)

th=0.5
y_pred_classes=(y_head>th).astype(int)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report

print("Accuracy Score: ",accuracy_score(y_test,y_pred_classes))
print("Accuracy Score: \n",confusion_matrix(y_test,y_pred_classes))
print(classification_report(y_test,y_pred_classes))

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report

cm = confusion_matrix(y_test, y_pred_classes)

#HEAT MAP DRAWING
plt.figure(figsize=(6, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Disease', 'Disease'], yticklabels=['No Disease', 'Disease'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix Heatmap')
plt.show()